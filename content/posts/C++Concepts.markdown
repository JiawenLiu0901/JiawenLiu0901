# C++ STL

## IO库

## 顺序容器

### vector和array有什么区别

\`std::vector\` 和 \`std::array\` 是 C++ 标准库中两种不同的数组容器：

1\. **动态大小 vs. 固定大小：**

- \`std::vector\` 是一个动态数组容器，可以在运行时动态增加或减少其大小。

<!-- -->

- \`std::array\`
  是一个固定大小的数组容器，其大小在编译时就已经确定，不能动态改变。

2\. **内存管理：**

- \`std::vector\`
  动态分配内存，可以在运行时根据需要调整大小。因此，它可能会涉及到堆内存的分配和释放。

<!-- -->

- \`std::array\` 在栈上分配内存，因为其大小在编译时已知。这使得
  \`std::array\` 更加轻量，避免了动态内存管理的开销。

3\. **访问成员函数：**

- \`std::vector\` 提供了一系列的成员函数，如 \`push_back\`、\`pop_back\`
  等，用于在容器尾部进行元素的插入和删除。因为它是动态数组，可以随时改变大小。

<!-- -->

- \`std::array\`
  的大小是固定的，因此没有在尾部插入和删除元素的操作。它提供的操作主要是数组的访问和迭代。

4\. **初始化：**

- \`std::vector\`
  可以通过构造函数或赋值操作符初始化，也可以使用列表初始化语法。

<!-- -->

- \`std::array\` 支持通过初始化列表进行初始化，也可以使用默认构造函数。

总的来说，选择使用 \`std::vector\` 还是 \`std::array\`
取决于你的需求。如果需要在运行时动态调整大小，而且不确定数组大小，使用
\`std::vector\`。如果数组大小在编译时就已知且不会改变，而且希望避免动态内存管理的开销，可以考虑使用
\`std::array\`。如何在 vector 和 deque 中快速插入和删除元素？

### 

### list 和 vector 的区别是什么？它们适用于不同的场景吗？

vector的底层实现是在heap上分配的数组，可以在运行时动态调整大小。

list

### 如何在 vector 中实现自动扩容？

动态分配一个双倍长度大小的array，将数据复制过去，将之前的数组内存释放，将内部指针指向新的数组。

### 如何在 vector 中实现元素去重？

### vector 和 list 中的迭代器有什么？

### 如何使用 vector 实现栈和队列？（SGI STL里面的数据结构）

队列：

### 顺序容器的类型有哪些？

array, vector, list, forward_list, deque

## 泛型算法

### 给定一个容器，如何使用泛型算法对容器进行排序？

### 什么情况下会发生迭代器失效？

### 给定一个容器，如何使用泛型算法查找容器中的最大/最小值？

## 关联容器

动态内存

# C++面向对象

## 拷贝控制

### 什么是移动构造函数和移动赋值运算符？

移动语义引入了移动构造函数（Move Constructor）和移动赋值运算符（Move
Assignment
Operator）的概念。它们允许将资源从一个对象转移到另一个对象，而不是进行深拷贝。这在处理动态分配内存、大型数据结构或资源密集型操作时特别有用，因为它避免了不必要的数据复制。C++11标准中引入了右值引用（Rvalue
References）的概念，使得移动语义成为可能。

移动构造：Array(Array&& other)

&&代表这个object是一个右值引用，

移动赋值运算符：Array & operator=(Array&& rhs)

### 什么是拷贝构造函数？什么时候会调用拷贝构造函数？

拷贝构造函数（Copy
Constructor）是一种特殊的构造函数，用于创建一个新对象并初始化其值为另一个同类型对象的值。

对象初始化：
当一个对象通过另一个对象进行初始化时，拷贝构造函数会被调用。这包括对象的直接初始化和拷贝初始化。

函数参数传递：
当一个对象作为函数的参数传递给另一个函数时，拷贝构造函数会被调用。

函数返回值：
当一个函数返回一个对象时，拷贝构造函数会被调用，将函数内部的局部对象复制到函数外部。

MyClass createObject() {

// 拷贝构造函数在这里被调用

return MyClass();

}

对象赋值： 当一个对象被另一个对象赋值时，拷贝构造函数会被调用。MyClass
obj2 = obj1;

### 如何实现深拷贝和浅拷贝？

### 什么是赋值运算符？什么时候会调用赋值运算符？

赋值运算符（operator=)的行为取决于变量的类型。对于基本数据类型（如整数、浮点数等），赋值运算符将直接复制值。对于用户定义的类型（如类对象），通常会调用该类型定义的赋值运算符重载函数。为了确保正确的行为，有时需要手动重载类的赋值运算符。默认情况下，C++
提供了一个成员逐一赋值的默认赋值运算符。但对于包含动态分配内存或其他资源管理的类，可能需要提供自定义的赋值运算符以防止资源泄漏或不正确的行为。

### 什么是 RAII（Resource Acquisition Is Initialization）技术，如何使用它来管理资源？

### 什么是智能指针？如何防止内存泄漏？

### 如何禁止类的对象进行复制操作？

## 面向对象程序设计

### 什么是多重继承？它有什么优点和缺点？

### 什么是虚继承？它有什么优点和缺点？

### 什么是右值引用？如何使用右值引用？（C++11新特性）

右值引用是一个暂时的、未命名的对象。

右值引用用于实现移动语义，用于将资源从一个对象移动到另外一个对象，而不是进行深拷贝，移动构造函数和移动赋值运算符使用右值引用来接受临时对象的资源，将其所有权转移到目标对象，并将源对象置于有效但未定义的状态。

### 什么是移动构造函数？为什么需要移动构造函数？

### 什么是抽象类？如何定义抽象类？

### 什么是虚函数？为什么需要虚函数？

### 什么是纯虚函数？为什么需要纯虚函数？

## 模版与泛型编程
